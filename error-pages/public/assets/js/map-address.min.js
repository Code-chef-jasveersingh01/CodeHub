function initialize() { $("form").on("keyup keypress", (function (e) { if (13 === (e.keyCode || e.which)) return e.preventDefault(), !1 })); var e = (e = $(".js-range-slider").ionRangeSlider({ min: .005, max: 100, step: .001, from: .005, to: 100, postfix: " KM" })).data("ionRangeSlider"); const t = document.getElementsByClassName("map-input"), o = [], n = new google.maps.Geocoder; for (let n = 0; n < t.length; n++) { const a = t[n], l = a.id.replace("-input", ""), i = ("" != document.getElementById(l + "-latitude").value && document.getElementById(l + "-longitude").value, parseFloat(document.getElementById(l + "-latitude").value) || -33.8688), s = parseFloat(document.getElementById(l + "-longitude").value) || 151.2195, u = parseFloat(document.getElementById(l + "-zone-radius").value) ? parseFloat(document.getElementById(l + "-zone-radius").value) : 0, r = new google.maps.Map(document.getElementById(l + "-map"), { center: { lat: i, lng: s }, zoom: 17 }), d = new google.maps.Marker({ map: r, position: { lat: i, lng: s } }), c = new google.maps.Circle({ strokeColor: "#FF0000", strokeOpacity: .8, strokeWeight: 2, fillColor: "#FF0000", fillOpacity: .35, map: r, center: { lat: i, lng: s }, radius: 1e3 * u }); c.bindTo("center", d, "position"), e.update({ from: u }); const m = new google.maps.places.Autocomplete(a); m.key = l, o.push({ input: a, map: r, marker: d, autocomplete: m, circle: c }) } for (let t = 0; t < o.length; t++) { const a = o[t].input, l = o[t].autocomplete, i = o[t].map, s = o[t].marker, u = o[t].circle, r = document.getElementById(l.key + "-circle-radius-range"), d = document.getElementById(l.key + "-zone-radius"); google.maps.event.addListener(l, "place_changed", (function () { s.setVisible(!1); const e = l.getPlace(); if (n.geocode({ placeId: e.place_id }, (function (e, t) { if (t === google.maps.GeocoderStatus.OK) { const t = e[0].geometry.location.lat(), o = e[0].geometry.location.lng(); setLocationCoordinates(l.key, t, o) } })), !e.geometry) return window.alert("No details available for input: '" + e.name + "'"), void (a.value = ""); e.geometry.viewport ? i.fitBounds(e.geometry.viewport) : (i.setCenter(e.geometry.location), i.setZoom(17)), s.setPosition(e.geometry.location), s.setVisible(!0) })), i.addListener("click", (e => { if (e.latLng.lat()) { const t = e.latLng.lat(), o = e.latLng.lng(); setLocationCoordinates(l.key, t, o) } i.setCenter(e.latLng), i.setZoom(17), s.setPosition(e.latLng) })), r.oninput = function () { d.value = this.value, updateRadius(u, parseFloat(1e3 * this.value)) }, d.oninput = function () { e.update({ from: this.value }), r.value = this.value, updateRadius(u, parseFloat(1e3 * this.value)) } } } function updateRadius(e, t) { e.setRadius(t) } function setLocationCoordinates(e, t, o) { const n = document.getElementById(e + "-latitude"), a = document.getElementById(e + "-longitude"); n.value = t, a.value = o }
